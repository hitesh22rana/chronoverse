name: chronoverse
services:
  postgres:
    image: postgres:alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chronoverse
    ports:
      - '5432:5432'
    restart: on-failure
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -q -d chronoverse -U postgres']
      timeout: 10s
      interval: 5s
      retries: 10
    networks:
      - chronoverse

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    environment:
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - '9000:9000'
    restart: on-failure
    volumes:
      - clickhouse:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--host=localhost", "--query=SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - chronoverse

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - '6379:6379'
    restart: on-failure
    volumes:
      - redis:/data
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - chronoverse

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    restart: on-failure
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_DURABILITY_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_TIER_METADATA_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: chronoverse
    volumes:
      - kafka:/var/lib/kafka/data
      - kafka-secrets:/etc/kafka/secrets
    networks:
      - chronoverse

  lgtm:
    image: grafana/otel-lgtm
    container_name: lgtm
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    restart: on-failure
    volumes:
      - lgtm:/data
      - otel-lgtm:/otel-lgtm
    ports:
      - '4317:4317'
      - '4318:4318'
      - '3000:3000'
    networks:
      - chronoverse

  docker-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: docker-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Image-related permissions
      IMAGES: 1
      IMAGE_CREATE: 1
      
      # Container-related permissions
      CONTAINERS: 1         # Basic container operations
      CONTAINER_CREATE: 1   # Needed for ContainerCreate
      CONTAINER_START: 1    # Needed for ContainerStart
      CONTAINER_LOGS: 1     # Needed for streaming logs
      CONTAINER_ATTACH: 1   # Might be needed for log streaming
      CONTAINER_WAIT: 1     # Needed for waiting on container exit
      CONTAINER_DELETE: 1   # Needed for container cleanup
      CONTAINER_STOP: 1     # Might be needed to stop containers
      
      # General permissions
      POST: 1               # Allow POST requests
      AUTH: 1               # Allow registry authentication
      
      # Network permissions
      NETWORKS: 0
      VOLUMES: 0
    networks:
      - chronoverse

  init-certs:
    image: alpine:latest
    container_name: init-certs
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      if [ -f /certs/auth.ed ] && [ -f /certs/auth.ed.pub ]; then
        echo "Certificates already exist, skipping generation"
      else
        echo "Generating new certificates..."
        apk update
        apk add --no-cache openssl
        openssl genpkey -algorithm ED25519 -outform pem -out /certs/auth.ed
        openssl pkey -in /certs/auth.ed -pubout -out /certs/auth.ed.pub
        echo "Certificates generated successfully"
      fi

      echo "Setting certificate permissions..."
      chmod 444 /certs/auth.ed.pub
      chmod 444 /certs/auth.ed
      echo "Certificate permissions set successfully"
      '
    restart: "no"
    networks:
      - chronoverse

  init-database-migration:
    image: database-migration
    container_name: init-database-migration
    environment:
      POSTGRES_HOST: postgres
      CLICKHOUSE_HOSTS: clickhouse:9000
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=database-migration
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    restart: "no"
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
    networks:
      - chronoverse

  users-service:
    image: users-service
    container_name: users-service
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      GRPC_PORT: 50051
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=users-service
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    ports:
      - '50051:50051'
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
    networks:
      - chronoverse

  workflows-service:
    image: workflows-service
    container_name: workflows-service
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      KAFKA_BROKERS: kafka:9092
      KAFKA_PRODUCER_TOPIC: workflows
      GRPC_PORT: 50052
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=workflows-service
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    ports:
      - '50052:50052'
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
    networks:
      - chronoverse

  jobs-service:
    image: jobs-service
    container_name: jobs-service
    environment:
      POSTGRES_HOST: postgres
      CLICKHOUSE_HOSTS: clickhouse:9000
      GRPC_PORT: 50053
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=jobs-service
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    ports:
      - '50053:50053'
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_started
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
    networks:
      - chronoverse

  notifications-service:
    image: notifications-service
    container_name: notifications-service
    environment:
      POSTGRES_HOST: postgres
      GRPC_PORT: 50054
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=notifications-service
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      postgres:
        condition: service_healthy
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
    networks:
      - chronoverse

  scheduling-worker:
    image: scheduling-worker
    container_name: scheduling-worker
    environment:
      POSTGRES_HOST: postgres
      KAFKA_BROKERS: kafka:9092
      KAFKA_PRODUCER_TOPIC: jobs
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=scheduling-worker
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
    networks:
      - chronoverse

  workflow-worker:
    image: workflow-worker
    container_name: workflow-worker
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_CONSUME_TOPICS: workflows
      KAFKA_CONSUMER_GROUP: workflow-worker
      WORKFLOWS_SERVICE_HOST: workflows-service
      WORKFLOWS_SERVICE_PORT: 50052
      JOBS_SERVICE_HOST: jobs-service
      JOBS_SERVICE_PORT: 50053
      NOTIFICATIONS_SERVICE_HOST: notifications-service
      NOTIFICATIONS_SERVICE_PORT: 50054
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
      DOCKER_HOST: tcp://docker-proxy:2375
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=workflow-worker
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      docker-proxy:
        condition: service_started
      kafka:
        condition: service_started
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
      workflows-service:
        condition: service_started
      jobs-service:
        condition: service_started
      notifications-service:
        condition: service_started
    networks:
      - chronoverse

  execution-worker:
    image: execution-worker
    container_name: execution-worker
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_PRODUCER_TOPIC: job_logs
      KAFKA_CONSUME_TOPICS: jobs
      KAFKA_CONSUMER_GROUP: execution-worker
      WORKFLOWS_SERVICE_HOST: workflows-service
      WORKFLOWS_SERVICE_PORT: 50052
      JOBS_SERVICE_HOST: jobs-service
      JOBS_SERVICE_PORT: 50053
      NOTIFICATIONS_SERVICE_HOST: notifications-service
      NOTIFICATIONS_SERVICE_PORT: 50054
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
      DOCKER_HOST: tcp://docker-proxy:2375
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=execution-worker
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    restart: on-failure
    volumes:
      - ./certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      docker-proxy:
        condition: service_started
      kafka:
        condition: service_started
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
      workflows-service:
        condition: service_started
      jobs-service:
        condition: service_started
      notifications-service:
        condition: service_started
    networks:
      - chronoverse

  joblogs-processor:
    image: joblogs-processor
    container_name: joblogs-processor
    environment:
      CLICKHOUSE_HOSTS: clickhouse:9000
      KAFKA_BROKERS: kafka:9092
      KAFKA_CONSUME_TOPICS: job_logs
      KAFKA_CONSUMER_GROUP: joblogs-processor
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=joblogs-processor
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      kafka:
        condition: service_started
      lgtm:
        condition: service_started
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
    networks:
      - chronoverse

  server:
    image: server
    container_name: server
    environment:
      SERVER_HOST: 0.0.0.0
      REDIS_HOST: redis
      USERS_SERVICE_HOST: users-service
      USERS_SERVICE_PORT: 50051
      WORKFLOWS_SERVICE_HOST: workflows-service
      WORKFLOWS_SERVICE_PORT: 50052
      JOBS_SERVICE_HOST: jobs-service
      JOBS_SERVICE_PORT: 50053
      NOTIFICATIONS_SERVICE_HOST: notifications-service
      NOTIFICATIONS_SERVICE_PORT: 50054
      OTEL_EXPORTER_OTLP_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://lgtm:4317
      OTEL_EXPORTER_OTLP_LOGS_INSECURE: true
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_METRIC_EXPORT_INTERVAL: 500
      OTEL_BSP_SCHEDULE_DELAY: 500
      ENV: development
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VERSION=v0.0.1
        - NAME=server
        - PRIVATE_KEY_PATH=certs/auth.ed
        - PUBLIC_KEY_PATH=certs/auth.ed.pub
    ports:
      - '8080:8080'
    restart: on-failure
    volumes:
      - ./certs:/certs
    entrypoint: |
      sh -c '
      while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
        echo "Waiting for certificates..."
        sleep 1
      done
      exec /bin/service
      '
    depends_on:
      redis:
        condition: service_healthy
      init-certs:
        condition: service_completed_successfully
      init-database-migration:
        condition: service_completed_successfully
      users-service:
        condition: service_started
      workflows-service:
        condition: service_started
      jobs-service:
        condition: service_started
      notifications-service:
        condition: service_started
    networks:
      - chronoverse

  dashboard:
    image: dashboard
    container_name: dashboard
    build:
      context: ./
      dockerfile: Dockerfile.dashboard
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8080
    ports:
      - '3001:3000'
    restart: on-failure
    depends_on:
      server:
        condition: service_started
      scheduling-worker:
        condition: service_started
      workflow-worker:
        condition: service_started
      execution-worker:
        condition: service_started
      joblogs-processor:
        condition: service_started
    networks:
      - chronoverse

volumes:
  postgres:
  clickhouse:
  redis:
  kafka:
  kafka-secrets:
  lgtm:
  otel-lgtm:

networks:
  chronoverse:
    name: chronoverse
    driver: bridge