// Code generated by MockGen. DO NOT EDIT.
// Source: jobs.go
//
// Generated by this command:
//
//	mockgen -source=jobs.go -package=jobs -destination=./mock/jobs.go
//

// Package jobs is a generated GoMock package.
package jobs

import (
	context "context"
	reflect "reflect"

	jobs "github.com/hitesh22rana/chronoverse/internal/model/jobs"
	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetJob mocks base method.
func (m *MockRepository) GetJob(ctx context.Context, jobID, workflowID, userID string) (*jobs.GetJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, jobID, workflowID, userID)
	ret0, _ := ret[0].(*jobs.GetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockRepositoryMockRecorder) GetJob(ctx, jobID, workflowID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockRepository)(nil).GetJob), ctx, jobID, workflowID, userID)
}

// GetJobByID mocks base method.
func (m *MockRepository) GetJobByID(ctx context.Context, jobID string) (*jobs.GetJobByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, jobID)
	ret0, _ := ret[0].(*jobs.GetJobByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockRepositoryMockRecorder) GetJobByID(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockRepository)(nil).GetJobByID), ctx, jobID)
}

// GetJobLogs mocks base method.
func (m *MockRepository) GetJobLogs(ctx context.Context, jobID, workflowID, userID, cursor string) (*jobs.GetJobLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobLogs", ctx, jobID, workflowID, userID, cursor)
	ret0, _ := ret[0].(*jobs.GetJobLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobLogs indicates an expected call of GetJobLogs.
func (mr *MockRepositoryMockRecorder) GetJobLogs(ctx, jobID, workflowID, userID, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobLogs", reflect.TypeOf((*MockRepository)(nil).GetJobLogs), ctx, jobID, workflowID, userID, cursor)
}

// ListJobs mocks base method.
func (m *MockRepository) ListJobs(ctx context.Context, workflowID, userID, cursor string, filters *jobs.ListJobsFilters) (*jobs.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx, workflowID, userID, cursor, filters)
	ret0, _ := ret[0].(*jobs.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockRepositoryMockRecorder) ListJobs(ctx, workflowID, userID, cursor, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockRepository)(nil).ListJobs), ctx, workflowID, userID, cursor, filters)
}

// ScheduleJob mocks base method.
func (m *MockRepository) ScheduleJob(ctx context.Context, workflowID, userID, scheduledAt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleJob", ctx, workflowID, userID, scheduledAt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleJob indicates an expected call of ScheduleJob.
func (mr *MockRepositoryMockRecorder) ScheduleJob(ctx, workflowID, userID, scheduledAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleJob", reflect.TypeOf((*MockRepository)(nil).ScheduleJob), ctx, workflowID, userID, scheduledAt)
}

// StreamJobLogs mocks base method.
func (m *MockRepository) StreamJobLogs(ctx context.Context, jobID, workflowID, userID string) (*redis.PubSub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamJobLogs", ctx, jobID, workflowID, userID)
	ret0, _ := ret[0].(*redis.PubSub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamJobLogs indicates an expected call of StreamJobLogs.
func (mr *MockRepositoryMockRecorder) StreamJobLogs(ctx, jobID, workflowID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamJobLogs", reflect.TypeOf((*MockRepository)(nil).StreamJobLogs), ctx, jobID, workflowID, userID)
}

// UpdateJobStatus mocks base method.
func (m *MockRepository) UpdateJobStatus(ctx context.Context, jobID, containerID, jobStatus string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", ctx, jobID, containerID, jobStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockRepositoryMockRecorder) UpdateJobStatus(ctx, jobID, containerID, jobStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockRepository)(nil).UpdateJobStatus), ctx, jobID, containerID, jobStatus)
}
