syntax = "proto3";

package jobs;

option go_package = "github.com/hitesh22rana/chronoverse/proto/go/jobs;jobs";

// ScheduleJobRequest contains the details needed to create a new job.
message ScheduleJobRequest {
    string workflow_id  = 1; // ID of the workflow
    string user_id      = 2; // ID of the user
    string scheduled_at = 3; // Time the job is scheduled to run
}

// ScheduleJobResponse contains the result of a job creation attempt.
message ScheduleJobResponse {
    string id = 1; // ID of the job
}

// UpdateJobStatusRequest contains the details needed to update the status of a job.
message UpdateJobStatusRequest {
    string id           = 1; // ID of the job
    string container_id = 2; // ID of the container (if applicable)
    string status       = 3; // Status of the job
}

// UpdateJobStatusResponse contains the result of a job status update attempt.
message UpdateJobStatusResponse {}


// GetJobRequest contains the details needed to get a job.
message GetJobRequest {
    string id           = 1; // ID of the job
    string workflow_id  = 2; // ID of the workflow
    string user_id      = 3; // ID of the user
}

// GetJobResponse contains the result of a job retrieval attempt.
message GetJobResponse {
    string id           = 1; // ID of the job
    string workflow_id  = 2; // ID of the workflow
    string status       = 3; // Status of the job
    string scheduled_at = 4; // Time the job is scheduled to run
    string started_at   = 5; // Time the job was started
    string completed_at = 6; // Time the job was completed
    string created_at   = 7; // Time the job was created
    string updated_at   = 8; // Time the job was last updated
}

// GetJobByIDRequest contains the details needed to get a job by ID.
message GetJobByIDRequest {
    string id = 1; // ID of the job
}

// GetJobByIDResponse contains the result of a job retrieval attempt.
message GetJobByIDResponse {
    string id           = 1; // ID of the job
    string workflow_id  = 2; // ID of the workflow
    string user_id      = 3; // ID of the user
    string container_id = 4; // ID of the container (if applicable)
    string status       = 5; // Status of the job
    string scheduled_at = 6; // Time the job is scheduled to run
    string started_at   = 7; // Time the job was started
    string completed_at = 8; // Time the job was completed
    string created_at   = 9; // Time the job was created
    string updated_at   = 10; // Time the job was last updated
}

// GetJobLogsRequest contains the details needed to get the logs of a job.
message GetJobLogsRequest {
    string id          = 1; // ID of the job
    string workflow_id = 2; // ID of the workflow
    string user_id     = 3; // ID of the user
    string cursor      = 4; // Cursor for pagination
}

// Log contains the details of a log.
message Log {
    string timestamp    = 1; // Time the log was created
    string message      = 2; // Log message
    uint32 sequence_num = 3; // Sequence number of the log
    string stream       = 4; // Stream type (stdout or stderr)
}

// GetJobLogsResponse contains the result of a job log retrieval attempt.
message GetJobLogsResponse {
    string id          = 1; // ID of the job
    string workflow_id = 2; // ID of the workflow
    repeated Log logs  = 3; // List of log messages
    string cursor      = 4; // Cursor for pagination
}

// StreamJobLogsRequest contains the details needed to stream the logs of a job.
message StreamJobLogsRequest {
    string id          = 1; // ID of the job
    string workflow_id = 2; // ID of the workflow
    string user_id     = 3; // ID of the user
}

// ListJobsFilters contains the filters for listing jobs.
message ListJobsFilters {
    string status = 1; // Status of the job (optional)
}

// ListJobsRequest contains the details needed to list all jobs for a workflow_id.
message ListJobsRequest {
    string workflow_id               = 1; // ID of the workflow
    string user_id                   = 2; // ID of the user
    string cursor                    = 3; // Cursor for pagination
    optional ListJobsFilters filters = 4; // Filters applied to the list
}

// JobsResponse contains the result of a job listing attempt.
message JobsResponse {
    string id           = 1; // ID of the job
    string workflow_id  = 2; // ID of the workflow
    string container_id = 3; // ID of the container (if applicable)
    string status       = 4; // Status of the job
    string scheduled_at = 5; // Time the job is scheduled to run
    string started_at   = 6; // Time the job was started
    string completed_at = 7; // Time the job was completed
    string created_at   = 8; // Time the job was created
    string updated_at   = 9; // Time the job was last updated
}

message ListJobsResponse {
    repeated JobsResponse jobs = 1; // List of jobs
    string cursor              = 2; // Cursor for pagination
}

// JobsService handles job related operations.
service JobsService {
    // ScheduleJob schedules a job to run at a specific time.
    // This is an internal API and should not be exposed to the public.
    rpc ScheduleJob(ScheduleJobRequest) returns (ScheduleJobResponse) {}

    // UpdateJobStatus updates the status of a job.
    // This is an internal API and should not be exposed to the public.
    rpc UpdateJobStatus(UpdateJobStatusRequest) returns (UpdateJobStatusResponse) {}

    // GetJob gets a job by ID and user_id.
    rpc GetJob(GetJobRequest) returns (GetJobResponse) {}

    // GetJobByID gets a job by ID.
    // This is an internal API and should not be exposed to the public.
    rpc GetJobByID(GetJobByIDRequest) returns (GetJobByIDResponse) {}

    // GetJobLogs gets the logs of a job.
    rpc GetJobLogs(GetJobLogsRequest) returns (GetJobLogsResponse) {}

    // StreamJobLogs streams the logs of a job.
    rpc StreamJobLogs(StreamJobLogsRequest) returns (stream Log) {}

    // ListJobs returns a list of all jobs for a workflow_id owned by a user.
    rpc ListJobs(ListJobsRequest) returns (ListJobsResponse) {}
}