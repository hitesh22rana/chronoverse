// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: jobs/jobs.proto

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobsService_CreateJob_FullMethodName                = "/jobs.JobsService/CreateJob"
	JobsService_GetJobByID_FullMethodName               = "/jobs.JobsService/GetJobByID"
	JobsService_ListAllJobsByUserID_FullMethodName      = "/jobs.JobsService/ListAllJobsByUserID"
	JobsService_ListAllScheduledJobsByID_FullMethodName = "/jobs.JobsService/ListAllScheduledJobsByID"
)

// JobsServiceClient is the client API for JobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JobsService handles job related operations.
type JobsServiceClient interface {
	// CreateJob a new job.
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	// GetJobByID a job by ID.
	GetJobByID(ctx context.Context, in *GetJobByIDRequest, opts ...grpc.CallOption) (*GetJobByIDResponse, error)
	// ListAllJobsByUserID returns a stream of all jobs.
	ListAllJobsByUserID(ctx context.Context, in *ListAllJobsByUserIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAllJobsByUserIDResponse], error)
	// ListAllScheduledJobsByID returns a stream of all scheduled jobs for a job_id.
	ListAllScheduledJobsByID(ctx context.Context, in *ListAllScheduledJobsByIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAllScheduledJobsByIDResponse], error)
}

type jobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsServiceClient(cc grpc.ClientConnInterface) JobsServiceClient {
	return &jobsServiceClient{cc}
}

func (c *jobsServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, JobsService_CreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) GetJobByID(ctx context.Context, in *GetJobByIDRequest, opts ...grpc.CallOption) (*GetJobByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobByIDResponse)
	err := c.cc.Invoke(ctx, JobsService_GetJobByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) ListAllJobsByUserID(ctx context.Context, in *ListAllJobsByUserIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAllJobsByUserIDResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobsService_ServiceDesc.Streams[0], JobsService_ListAllJobsByUserID_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListAllJobsByUserIDRequest, ListAllJobsByUserIDResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobsService_ListAllJobsByUserIDClient = grpc.ServerStreamingClient[ListAllJobsByUserIDResponse]

func (c *jobsServiceClient) ListAllScheduledJobsByID(ctx context.Context, in *ListAllScheduledJobsByIDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListAllScheduledJobsByIDResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobsService_ServiceDesc.Streams[1], JobsService_ListAllScheduledJobsByID_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListAllScheduledJobsByIDRequest, ListAllScheduledJobsByIDResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobsService_ListAllScheduledJobsByIDClient = grpc.ServerStreamingClient[ListAllScheduledJobsByIDResponse]

// JobsServiceServer is the server API for JobsService service.
// All implementations should embed UnimplementedJobsServiceServer
// for forward compatibility.
//
// JobsService handles job related operations.
type JobsServiceServer interface {
	// CreateJob a new job.
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	// GetJobByID a job by ID.
	GetJobByID(context.Context, *GetJobByIDRequest) (*GetJobByIDResponse, error)
	// ListAllJobsByUserID returns a stream of all jobs.
	ListAllJobsByUserID(*ListAllJobsByUserIDRequest, grpc.ServerStreamingServer[ListAllJobsByUserIDResponse]) error
	// ListAllScheduledJobsByID returns a stream of all scheduled jobs for a job_id.
	ListAllScheduledJobsByID(*ListAllScheduledJobsByIDRequest, grpc.ServerStreamingServer[ListAllScheduledJobsByIDResponse]) error
}

// UnimplementedJobsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobsServiceServer struct{}

func (UnimplementedJobsServiceServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedJobsServiceServer) GetJobByID(context.Context, *GetJobByIDRequest) (*GetJobByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobByID not implemented")
}
func (UnimplementedJobsServiceServer) ListAllJobsByUserID(*ListAllJobsByUserIDRequest, grpc.ServerStreamingServer[ListAllJobsByUserIDResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListAllJobsByUserID not implemented")
}
func (UnimplementedJobsServiceServer) ListAllScheduledJobsByID(*ListAllScheduledJobsByIDRequest, grpc.ServerStreamingServer[ListAllScheduledJobsByIDResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListAllScheduledJobsByID not implemented")
}
func (UnimplementedJobsServiceServer) testEmbeddedByValue() {}

// UnsafeJobsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsServiceServer will
// result in compilation errors.
type UnsafeJobsServiceServer interface {
	mustEmbedUnimplementedJobsServiceServer()
}

func RegisterJobsServiceServer(s grpc.ServiceRegistrar, srv JobsServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobsService_ServiceDesc, srv)
}

func _JobsService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_GetJobByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).GetJobByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_GetJobByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).GetJobByID(ctx, req.(*GetJobByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_ListAllJobsByUserID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllJobsByUserIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServiceServer).ListAllJobsByUserID(m, &grpc.GenericServerStream[ListAllJobsByUserIDRequest, ListAllJobsByUserIDResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobsService_ListAllJobsByUserIDServer = grpc.ServerStreamingServer[ListAllJobsByUserIDResponse]

func _JobsService_ListAllScheduledJobsByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllScheduledJobsByIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobsServiceServer).ListAllScheduledJobsByID(m, &grpc.GenericServerStream[ListAllScheduledJobsByIDRequest, ListAllScheduledJobsByIDResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobsService_ListAllScheduledJobsByIDServer = grpc.ServerStreamingServer[ListAllScheduledJobsByIDResponse]

// JobsService_ServiceDesc is the grpc.ServiceDesc for JobsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobs.JobsService",
	HandlerType: (*JobsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobsService_CreateJob_Handler,
		},
		{
			MethodName: "GetJobByID",
			Handler:    _JobsService_GetJobByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAllJobsByUserID",
			Handler:       _JobsService_ListAllJobsByUserID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAllScheduledJobsByID",
			Handler:       _JobsService_ListAllScheduledJobsByID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobs/jobs.proto",
}
