// Code generated by MockGen. DO NOT EDIT.
// Source: notifications.go
//
// Generated by this command:
//
//	mockgen -source=notifications.go -package=notifications -destination=./mock/notifications.go
//

// Package notifications is a generated GoMock package.
package notifications

import (
	context "context"
	reflect "reflect"

	notifications "github.com/hitesh22rana/chronoverse/internal/model/notifications"
	notifications0 "github.com/hitesh22rana/chronoverse/pkg/proto/go/notifications"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockService) CreateNotification(ctx context.Context, req *notifications0.CreateNotificationRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockServiceMockRecorder) CreateNotification(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockService)(nil).CreateNotification), ctx, req)
}

// ListNotifications mocks base method.
func (m *MockService) ListNotifications(ctx context.Context, req *notifications0.ListNotificationsRequest) (*notifications.ListNotificationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", ctx, req)
	ret0, _ := ret[0].(*notifications.ListNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockServiceMockRecorder) ListNotifications(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockService)(nil).ListNotifications), ctx, req)
}

// MarkNotificationsRead mocks base method.
func (m *MockService) MarkNotificationsRead(ctx context.Context, req *notifications0.MarkNotificationsReadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationsRead", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNotificationsRead indicates an expected call of MarkNotificationsRead.
func (mr *MockServiceMockRecorder) MarkNotificationsRead(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationsRead", reflect.TypeOf((*MockService)(nil).MarkNotificationsRead), ctx, req)
}
