apiVersion: v1
kind: ConfigMap
metadata:
  name: server-config
  namespace: chronoverse
  labels:
    app: server
    component: backend
data:
  SERVER_HOST: "0.0.0.0"
  SERVER_PORT: "8080"
  SERVER_FRONTEND_URL: "http://localhost:80"
  CLIENT_TLS_CERT_FILE: "certs/clients/client.crt"
  CLIENT_TLS_KEY_FILE: "certs/clients/client.key"
  USERS_SERVICE_HOST: "dns:///users-service.chronoverse.svc.cluster.local"
  USERS_SERVICE_PORT: "50051"
  USERS_SERVICE_TLS_ENABLED: "true"
  USERS_SERVICE_TLS_CA_FILE: "certs/ca/ca.crt"
  WORKFLOWS_SERVICE_HOST: "dns:///workflows-service.chronoverse.svc.cluster.local"
  WORKFLOWS_SERVICE_PORT: "50052"
  WORKFLOWS_SERVICE_TLS_ENABLED: "true"
  WORKFLOWS_SERVICE_TLS_CA_FILE: "certs/ca/ca.crt"
  JOBS_SERVICE_HOST: "dns:///jobs-service.chronoverse.svc.cluster.local"
  JOBS_SERVICE_PORT: "50053"
  JOBS_SERVICE_TLS_ENABLED: "true"
  JOBS_SERVICE_TLS_CA_FILE: "certs/ca/ca.crt"
  NOTIFICATIONS_SERVICE_HOST: "dns:///notifications-service.chronoverse.svc.cluster.local"
  NOTIFICATIONS_SERVICE_PORT: "50054"
  NOTIFICATIONS_SERVICE_TLS_ENABLED: "true"
  NOTIFICATIONS_SERVICE_TLS_CA_FILE: "certs/ca/ca.crt"
  ANALYTICS_SERVICE_HOST: "dns:///analytics-service.chronoverse.svc.cluster.local"
  ANALYTICS_SERVICE_PORT: "50055"
  ANALYTICS_SERVICE_TLS_ENABLED: "true"
  ANALYTICS_SERVICE_TLS_CA_FILE: "certs/ca/ca.crt"
  ENV: "production"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: chronoverse
  labels:
    app: server
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: server
      component: backend
  template:
    metadata:
      labels:
        app: server
        component: backend
    spec:
      initContainers:
      - name: wait-for-certs
        image: alpine:latest
        command:
        - sh
        - -c
        - |
          while [ ! -f /certs/auth.ed ] || [ ! -f /certs/auth.ed.pub ]; do 
            echo "Waiting for certificates..."
            sleep 1
          done
          echo "âœ… Certificates found!"
        volumeMounts:
        - name: certs-storage
          mountPath: /certs
      containers:
      - name: server
        image: ghcr.io/hitesh22rana/chronoverse/server:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: redis-connection-config
        - configMapRef:
            name: observability-config
        - configMapRef:
            name: server-config
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        volumeMounts:
        - name: certs-storage
          mountPath: /certs
      volumes:
      - name: certs-storage
        persistentVolumeClaim:
          claimName: certs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: chronoverse
  labels:
    app: server
    component: backend
spec:
  type: ClusterIP
  selector:
    app: server
    component: backend
  ports:
  - port: 8080
    targetPort: 8080
