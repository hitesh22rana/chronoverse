// Code generated by MockGen. DO NOT EDIT.
// Source: jobs.go
//
// Generated by this command:
//
//	mockgen -source=jobs.go -package=jobs -destination=./mock/jobs.go
//

// Package jobs is a generated GoMock package.
package jobs

import (
	context "context"
	reflect "reflect"

	model "github.com/hitesh22rana/chronoverse/internal/model"
	jobs "github.com/hitesh22rana/chronoverse/pkg/proto/go/jobs"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockService) CreateJob(ctx context.Context, req *jobs.CreateJobRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockServiceMockRecorder) CreateJob(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockService)(nil).CreateJob), ctx, req)
}

// GetJob mocks base method.
func (m *MockService) GetJob(ctx context.Context, req *jobs.GetJobRequest) (*model.GetJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, req)
	ret0, _ := ret[0].(*model.GetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockServiceMockRecorder) GetJob(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockService)(nil).GetJob), ctx, req)
}

// GetJobByID mocks base method.
func (m *MockService) GetJobByID(ctx context.Context, req *jobs.GetJobByIDRequest) (*model.GetJobByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, req)
	ret0, _ := ret[0].(*model.GetJobByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockServiceMockRecorder) GetJobByID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockService)(nil).GetJobByID), ctx, req)
}

// ListJobsByUserID mocks base method.
func (m *MockService) ListJobsByUserID(ctx context.Context, req *jobs.ListJobsByUserIDRequest) (*model.ListJobsByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByUserID", ctx, req)
	ret0, _ := ret[0].(*model.ListJobsByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByUserID indicates an expected call of ListJobsByUserID.
func (mr *MockServiceMockRecorder) ListJobsByUserID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByUserID", reflect.TypeOf((*MockService)(nil).ListJobsByUserID), ctx, req)
}

// ListScheduledJobs mocks base method.
func (m *MockService) ListScheduledJobs(ctx context.Context, req *jobs.ListScheduledJobsRequest) (*model.ListScheduledJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScheduledJobs", ctx, req)
	ret0, _ := ret[0].(*model.ListScheduledJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduledJobs indicates an expected call of ListScheduledJobs.
func (mr *MockServiceMockRecorder) ListScheduledJobs(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledJobs", reflect.TypeOf((*MockService)(nil).ListScheduledJobs), ctx, req)
}

// UpdateJob mocks base method.
func (m *MockService) UpdateJob(ctx context.Context, req *jobs.UpdateJobRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockServiceMockRecorder) UpdateJob(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockService)(nil).UpdateJob), ctx, req)
}
