CREATE TABLE if NOT EXISTS analytics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v7(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Foreign key constraint
    workflow_id UUID NOT NULL, -- No foreign key constraint, allows orphaned analytics
    -- This allows analytics to remain even if the workflow is deleted.
    kind TEXT DEFAULT '', -- Workflow kind (e.g., 'HEARTBEAT', 'CONTAINER', etc.) (default empty)
    total_job_execution_duration BIGINT NOT NULL DEFAULT 0, -- Total job execution duration in seconds
    jobs_count INT NOT NULL DEFAULT 0, -- Count of jobs for the workflow
    logs_count BIGINT NOT NULL DEFAULT 0, -- Count of logs generated by all jobs in the workflow
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT (now() AT TIME ZONE 'utc') NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_analytics_user ON analytics (user_id); -- Index for user-based queries
CREATE UNIQUE INDEX IF NOT EXISTS idx_analytics_user_workflow ON analytics (user_id, workflow_id); -- Unique index for user and workflow-based queries, enables upsert functionality

-- Auto-update updated_at on row updates
CREATE OR REPLACE FUNCTION update_analytics_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now() AT TIME ZONE 'utc';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_analytics
BEFORE UPDATE ON analytics
FOR EACH ROW
EXECUTE FUNCTION update_analytics_updated_at();