// Code generated by MockGen. DO NOT EDIT.
// Source: jobs.go
//
// Generated by this command:
//
//	mockgen -source=jobs.go -package=jobs -destination=./mock/jobs.go
//

// Package jobs is a generated GoMock package.
package jobs

import (
	context "context"
	reflect "reflect"

	model "github.com/hitesh22rana/chronoverse/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockRepository) CreateJob(ctx context.Context, userID, name, payload, kind string, interval, maxRetries int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, userID, name, payload, kind, interval, maxRetries)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockRepositoryMockRecorder) CreateJob(ctx, userID, name, payload, kind, interval, maxRetries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockRepository)(nil).CreateJob), ctx, userID, name, payload, kind, interval, maxRetries)
}

// GetJobByID mocks base method.
func (m *MockRepository) GetJobByID(ctx context.Context, jobID string) (*model.GetJobByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, jobID)
	ret0, _ := ret[0].(*model.GetJobByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockRepositoryMockRecorder) GetJobByID(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockRepository)(nil).GetJobByID), ctx, jobID)
}

// ListJobsByUserID mocks base method.
func (m *MockRepository) ListJobsByUserID(ctx context.Context, userID string) (*model.ListJobsByUserIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByUserID", ctx, userID)
	ret0, _ := ret[0].(*model.ListJobsByUserIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByUserID indicates an expected call of ListJobsByUserID.
func (mr *MockRepositoryMockRecorder) ListJobsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByUserID", reflect.TypeOf((*MockRepository)(nil).ListJobsByUserID), ctx, userID)
}

// ListScheduledJobsByJobID mocks base method.
func (m *MockRepository) ListScheduledJobsByJobID(ctx context.Context, jobID string) (*model.ListScheduledJobsByJobIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScheduledJobsByJobID", ctx, jobID)
	ret0, _ := ret[0].(*model.ListScheduledJobsByJobIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduledJobsByJobID indicates an expected call of ListScheduledJobsByJobID.
func (mr *MockRepositoryMockRecorder) ListScheduledJobsByJobID(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledJobsByJobID", reflect.TypeOf((*MockRepository)(nil).ListScheduledJobsByJobID), ctx, jobID)
}
