// Code generated by MockGen. DO NOT EDIT.
// Source: analytics.go
//
// Generated by this command:
//
//	mockgen -source=analytics.go -package=analytics -destination=./mock/analytics.go
//

// Package analytics is a generated GoMock package.
package analytics

import (
	context "context"
	reflect "reflect"

	analytics "github.com/hitesh22rana/chronoverse/internal/model/analytics"
	analytics0 "github.com/hitesh22rana/chronoverse/pkg/proto/go/analytics"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetUserAnalytics mocks base method.
func (m *MockService) GetUserAnalytics(ctx context.Context, req *analytics0.GetUserAnalyticsRequest) (*analytics.GetUserAnalyticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAnalytics", ctx, req)
	ret0, _ := ret[0].(*analytics.GetUserAnalyticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAnalytics indicates an expected call of GetUserAnalytics.
func (mr *MockServiceMockRecorder) GetUserAnalytics(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAnalytics", reflect.TypeOf((*MockService)(nil).GetUserAnalytics), ctx, req)
}

// GetWorkflowAnalytics mocks base method.
func (m *MockService) GetWorkflowAnalytics(ctx context.Context, req *analytics0.GetWorkflowAnalyticsRequest) (*analytics.GetWorkflowAnalyticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowAnalytics", ctx, req)
	ret0, _ := ret[0].(*analytics.GetWorkflowAnalyticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowAnalytics indicates an expected call of GetWorkflowAnalytics.
func (mr *MockServiceMockRecorder) GetWorkflowAnalytics(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowAnalytics", reflect.TypeOf((*MockService)(nil).GetWorkflowAnalytics), ctx, req)
}
