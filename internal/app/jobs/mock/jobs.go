// Code generated by MockGen. DO NOT EDIT.
// Source: jobs.go
//
// Generated by this command:
//
//	mockgen -source=jobs.go -package=jobs -destination=./mock/jobs.go
//

// Package jobs is a generated GoMock package.
package jobs

import (
	context "context"
	reflect "reflect"

	jobs "github.com/hitesh22rana/chronoverse/internal/model/jobs"
	jobs0 "github.com/hitesh22rana/chronoverse/pkg/proto/go/jobs"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetJob mocks base method.
func (m *MockService) GetJob(ctx context.Context, req *jobs0.GetJobRequest) (*jobs.GetJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ctx, req)
	ret0, _ := ret[0].(*jobs.GetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockServiceMockRecorder) GetJob(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockService)(nil).GetJob), ctx, req)
}

// GetJobByID mocks base method.
func (m *MockService) GetJobByID(ctx context.Context, req *jobs0.GetJobByIDRequest) (*jobs.GetJobByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, req)
	ret0, _ := ret[0].(*jobs.GetJobByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockServiceMockRecorder) GetJobByID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockService)(nil).GetJobByID), ctx, req)
}

// GetJobLogs mocks base method.
func (m *MockService) GetJobLogs(ctx context.Context, req *jobs0.GetJobLogsRequest) (*jobs.GetJobLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobLogs", ctx, req)
	ret0, _ := ret[0].(*jobs.GetJobLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobLogs indicates an expected call of GetJobLogs.
func (mr *MockServiceMockRecorder) GetJobLogs(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobLogs", reflect.TypeOf((*MockService)(nil).GetJobLogs), ctx, req)
}

// ListJobs mocks base method.
func (m *MockService) ListJobs(ctx context.Context, req *jobs0.ListJobsRequest) (*jobs.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", ctx, req)
	ret0, _ := ret[0].(*jobs.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockServiceMockRecorder) ListJobs(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockService)(nil).ListJobs), ctx, req)
}

// ScheduleJob mocks base method.
func (m *MockService) ScheduleJob(ctx context.Context, req *jobs0.ScheduleJobRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleJob", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleJob indicates an expected call of ScheduleJob.
func (mr *MockServiceMockRecorder) ScheduleJob(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleJob", reflect.TypeOf((*MockService)(nil).ScheduleJob), ctx, req)
}

// StreamJobLogs mocks base method.
func (m *MockService) StreamJobLogs(ctx context.Context, req *jobs0.StreamJobLogsRequest) (chan *jobs.JobLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamJobLogs", ctx, req)
	ret0, _ := ret[0].(chan *jobs.JobLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamJobLogs indicates an expected call of StreamJobLogs.
func (mr *MockServiceMockRecorder) StreamJobLogs(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamJobLogs", reflect.TypeOf((*MockService)(nil).StreamJobLogs), ctx, req)
}

// UpdateJobStatus mocks base method.
func (m *MockService) UpdateJobStatus(ctx context.Context, req *jobs0.UpdateJobStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockServiceMockRecorder) UpdateJobStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockService)(nil).UpdateJobStatus), ctx, req)
}
