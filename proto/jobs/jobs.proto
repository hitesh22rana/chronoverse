syntax = "proto3";

package jobs;

option go_package = "github.com/hitesh22rana/chronoverse/proto/go/jobs;jobs";

// CreateJobRequest contains the details needed to create a new job.
message CreateJobRequest {
    string user_id  = 1; // ID of the user
    string name     = 2; // Name of the job
    string payload  = 3; // JSON string for payload
    string kind     = 4; // Kind of job
    int32 interval  = 5; // Interval measured in minutes
    int32 max_retry = 6; // Maximum number of retries
}

// CreateJobResponse contains the result of a job creation attempt.
message CreateJobResponse {
    string id = 1; // ID of the job
}

// UpdateJobRequest contains the details needed to update a job.
message UpdateJobRequest {
    string id        = 1; // ID of the job
    string user_id   = 2; // ID of the user
    string name      = 3; // Name of the job
    string payload   = 4; // JSON string for payload
    string kind      = 5; // Kind of job
    int32 interval   = 6; // Interval measured in minutes
}

// UpdateJobResponse contains the result of a job update attempt.
message UpdateJobResponse {}

// GetJobRequest contains the details needed to get a job.
message GetJobRequest {
    string id      = 1; // ID of the job
    string user_id = 2; // ID of the user
}

// GetJobResponse contains the result of a job retrieval attempt.
message GetJobResponse {
    string id            = 1; // ID of the job
    string name          = 2; // Name of the job
    string payload       = 3; // JSON string for payload
    string kind          = 4; // Kind of job
    int32 interval       = 5; // Interval measured in minutes
    string created_at    = 6; // Time the job was created
    string updated_at    = 7; // Time the job was last updated
    string terminated_at = 8; // Time the job was terminated
}

// GetJobByIDRequest contains the details needed to get a job by job_id.
// This is an internal API and should not be exposed to the public.
message GetJobByIDRequest {
    string id = 1; // ID of the job
}

// GetJobByIDResponse contains the result of a job retrieval attempt.
message GetJobByIDResponse {
    string id            = 1; // ID of the job
    string user_id       = 2; // ID of the user
    string name          = 3; // Name of the job
    string payload       = 4; // JSON string for payload
    string kind          = 5; // Kind of job
    int32 interval       = 6; // Interval measured in minutes
    string created_at    = 7; // Time the job was created
    string updated_at    = 8; // Time the job was last updated
    string terminated_at = 9; // Time the job was terminated
}

// ListJobsByUserIDRequest contains the details needed to list all jobs.
message ListJobsByUserIDRequest {
    string user_id = 1; // ID of the user
    string cursor  = 2; // Token for pagination
}

// JobsByUserIDResponse contains the result of a job listing attempt.
message JobsByUserIDResponse {
    string id            = 1; // ID of the job
    string name          = 2; // Name of the job
    string payload       = 3; // JSON string for payload
    string kind          = 4; // Kind of job
    int32 interval       = 5; // Interval measured in minutes
    string created_at    = 6; // Time the job was created
    string updated_at    = 7; // Time the job was last updated
    string terminated_at = 8; // Time the job was terminated
}

// ListJobsByUserIDResponse contains the result of a job listing attempt.
message ListJobsByUserIDResponse {
    repeated JobsByUserIDResponse jobs = 1; // List of jobs
    string cursor                      = 2; // Token for pagination
}

// ListScheduledJobsRequest contains the details needed to list all scheduled jobs for a job_id.
message ListScheduledJobsRequest {
    string job_id  = 1; // ID of the job
    string user_id = 2; // ID of the user
    string cursor  = 3; // Token for pagination
}

// ScheduledJobsResponse contains the result of a scheduled job listing attempt.
message ScheduledJobsResponse {
    string id           = 1; // ID of the scheduled job
    string status       = 2; // Status of the scheduled job
    string scheduled_at = 3; // Time the job is scheduled to run
    int32 retry_count   = 4; // Number of retries
    int32 max_retry     = 5; // Maximum number of retries
    string started_at   = 6; // Time the job was started
    string completed_at = 7; // Time the job was completed
    string created_at   = 8; // Time the job was created
    string updated_at   = 9; // Time the job was last updated
}

message ListScheduledJobsResponse {
    repeated ScheduledJobsResponse scheduled_jobs = 1; // List of scheduled jobs
    string cursor                                 = 2; // Token for pagination
}

// JobsService handles job related operations.
service JobsService {
    // CreateJob a new job.
    rpc CreateJob(CreateJobRequest) returns (CreateJobResponse) {}

    // UpdateJob an existing job.
    rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse) {}

    // GetJob a job by ID and user_id.
    rpc GetJob(GetJobRequest) returns (GetJobResponse) {}

    // GetJobByID a job by ID.
    // This is an internal API and should not be exposed to the public.
    rpc GetJobByID(GetJobByIDRequest) returns (GetJobByIDResponse) {}

    // ListJobsByUserID returns a list of all jobs for a user_id.
    rpc ListJobsByUserID(ListJobsByUserIDRequest) returns (ListJobsByUserIDResponse) {}

    // ListScheduledJobs returns a list of all scheduled jobs for a job_id.
    rpc ListScheduledJobs(ListScheduledJobsRequest) returns (ListScheduledJobsResponse) {}
}