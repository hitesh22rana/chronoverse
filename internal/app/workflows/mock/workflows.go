// Code generated by MockGen. DO NOT EDIT.
// Source: workflows.go
//
// Generated by this command:
//
//	mockgen -source=workflows.go -package=workflows -destination=./mock/workflows.go
//

// Package workflows is a generated GoMock package.
package workflows

import (
	context "context"
	reflect "reflect"

	workflows "github.com/hitesh22rana/chronoverse/internal/model/workflows"
	workflows0 "github.com/hitesh22rana/chronoverse/pkg/proto/go/workflows"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateWorkflow mocks base method.
func (m *MockService) CreateWorkflow(ctx context.Context, req *workflows0.CreateWorkflowRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockServiceMockRecorder) CreateWorkflow(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockService)(nil).CreateWorkflow), ctx, req)
}

// DeleteWorkflow mocks base method.
func (m *MockService) DeleteWorkflow(ctx context.Context, req *workflows0.DeleteWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockServiceMockRecorder) DeleteWorkflow(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockService)(nil).DeleteWorkflow), ctx, req)
}

// GetWorkflow mocks base method.
func (m *MockService) GetWorkflow(ctx context.Context, req *workflows0.GetWorkflowRequest) (*workflows.GetWorkflowResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", ctx, req)
	ret0, _ := ret[0].(*workflows.GetWorkflowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockServiceMockRecorder) GetWorkflow(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockService)(nil).GetWorkflow), ctx, req)
}

// GetWorkflowByID mocks base method.
func (m *MockService) GetWorkflowByID(ctx context.Context, req *workflows0.GetWorkflowByIDRequest) (*workflows.GetWorkflowByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowByID", ctx, req)
	ret0, _ := ret[0].(*workflows.GetWorkflowByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowByID indicates an expected call of GetWorkflowByID.
func (mr *MockServiceMockRecorder) GetWorkflowByID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowByID", reflect.TypeOf((*MockService)(nil).GetWorkflowByID), ctx, req)
}

// IncrementWorkflowConsecutiveJobFailuresCount mocks base method.
func (m *MockService) IncrementWorkflowConsecutiveJobFailuresCount(ctx context.Context, req *workflows0.IncrementWorkflowConsecutiveJobFailuresCountRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementWorkflowConsecutiveJobFailuresCount", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementWorkflowConsecutiveJobFailuresCount indicates an expected call of IncrementWorkflowConsecutiveJobFailuresCount.
func (mr *MockServiceMockRecorder) IncrementWorkflowConsecutiveJobFailuresCount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementWorkflowConsecutiveJobFailuresCount", reflect.TypeOf((*MockService)(nil).IncrementWorkflowConsecutiveJobFailuresCount), ctx, req)
}

// ListWorkflows mocks base method.
func (m *MockService) ListWorkflows(ctx context.Context, req *workflows0.ListWorkflowsRequest) (*workflows.ListWorkflowsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", ctx, req)
	ret0, _ := ret[0].(*workflows.ListWorkflowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockServiceMockRecorder) ListWorkflows(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockService)(nil).ListWorkflows), ctx, req)
}

// ResetWorkflowConsecutiveJobFailuresCount mocks base method.
func (m *MockService) ResetWorkflowConsecutiveJobFailuresCount(ctx context.Context, req *workflows0.ResetWorkflowConsecutiveJobFailuresCountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetWorkflowConsecutiveJobFailuresCount", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetWorkflowConsecutiveJobFailuresCount indicates an expected call of ResetWorkflowConsecutiveJobFailuresCount.
func (mr *MockServiceMockRecorder) ResetWorkflowConsecutiveJobFailuresCount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWorkflowConsecutiveJobFailuresCount", reflect.TypeOf((*MockService)(nil).ResetWorkflowConsecutiveJobFailuresCount), ctx, req)
}

// TerminateWorkflow mocks base method.
func (m *MockService) TerminateWorkflow(ctx context.Context, req *workflows0.TerminateWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateWorkflow", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateWorkflow indicates an expected call of TerminateWorkflow.
func (mr *MockServiceMockRecorder) TerminateWorkflow(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkflow", reflect.TypeOf((*MockService)(nil).TerminateWorkflow), ctx, req)
}

// UpdateWorkflow mocks base method.
func (m *MockService) UpdateWorkflow(ctx context.Context, req *workflows0.UpdateWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockServiceMockRecorder) UpdateWorkflow(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockService)(nil).UpdateWorkflow), ctx, req)
}

// UpdateWorkflowBuildStatus mocks base method.
func (m *MockService) UpdateWorkflowBuildStatus(ctx context.Context, req *workflows0.UpdateWorkflowBuildStatusRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowBuildStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowBuildStatus indicates an expected call of UpdateWorkflowBuildStatus.
func (mr *MockServiceMockRecorder) UpdateWorkflowBuildStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowBuildStatus", reflect.TypeOf((*MockService)(nil).UpdateWorkflowBuildStatus), ctx, req)
}
