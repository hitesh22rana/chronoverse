// Code generated by MockGen. DO NOT EDIT.
// Source: pat.go
//
// Generated by this command:
//
//	mockgen -source=pat.go -package=pat -destination=./mock/pat.go
//

// Package pat is a generated GoMock package.
package pat

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenIssuer is a mock of TokenIssuer interface.
type MockTokenIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenIssuerMockRecorder
	isgomock struct{}
}

// MockTokenIssuerMockRecorder is the mock recorder for MockTokenIssuer.
type MockTokenIssuerMockRecorder struct {
	mock *MockTokenIssuer
}

// NewMockTokenIssuer creates a new mock instance.
func NewMockTokenIssuer(ctrl *gomock.Controller) *MockTokenIssuer {
	mock := &MockTokenIssuer{ctrl: ctrl}
	mock.recorder = &MockTokenIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenIssuer) EXPECT() *MockTokenIssuerMockRecorder {
	return m.recorder
}

// IsValidPat mocks base method.
func (m *MockTokenIssuer) IsValidPat(ctx context.Context, pat string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidPat", ctx, pat)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidPat indicates an expected call of IsValidPat.
func (mr *MockTokenIssuerMockRecorder) IsValidPat(ctx, pat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidPat", reflect.TypeOf((*MockTokenIssuer)(nil).IsValidPat), ctx, pat)
}

// IssuePat mocks base method.
func (m *MockTokenIssuer) IssuePat(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuePat", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssuePat indicates an expected call of IssuePat.
func (mr *MockTokenIssuerMockRecorder) IssuePat(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuePat", reflect.TypeOf((*MockTokenIssuer)(nil).IssuePat), ctx, userID)
}

// RevokePat mocks base method.
func (m *MockTokenIssuer) RevokePat(ctx context.Context, pat string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePat", ctx, pat)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePat indicates an expected call of RevokePat.
func (mr *MockTokenIssuerMockRecorder) RevokePat(ctx, pat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePat", reflect.TypeOf((*MockTokenIssuer)(nil).RevokePat), ctx, pat)
}
