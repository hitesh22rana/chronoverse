// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: workflows/workflows.proto

package workflows

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowsService_CreateWorkflow_FullMethodName                               = "/workflows.WorkflowsService/CreateWorkflow"
	WorkflowsService_UpdateWorkflow_FullMethodName                               = "/workflows.WorkflowsService/UpdateWorkflow"
	WorkflowsService_UpdateWorkflowBuildStatus_FullMethodName                    = "/workflows.WorkflowsService/UpdateWorkflowBuildStatus"
	WorkflowsService_GetWorkflow_FullMethodName                                  = "/workflows.WorkflowsService/GetWorkflow"
	WorkflowsService_GetWorkflowByID_FullMethodName                              = "/workflows.WorkflowsService/GetWorkflowByID"
	WorkflowsService_IncrementWorkflowConsecutiveJobFailuresCount_FullMethodName = "/workflows.WorkflowsService/IncrementWorkflowConsecutiveJobFailuresCount"
	WorkflowsService_ResetWorkflowConsecutiveJobFailuresCount_FullMethodName     = "/workflows.WorkflowsService/ResetWorkflowConsecutiveJobFailuresCount"
	WorkflowsService_TerminateWorkflow_FullMethodName                            = "/workflows.WorkflowsService/TerminateWorkflow"
	WorkflowsService_DeleteWorkflow_FullMethodName                               = "/workflows.WorkflowsService/DeleteWorkflow"
	WorkflowsService_ListWorkflows_FullMethodName                                = "/workflows.WorkflowsService/ListWorkflows"
)

// WorkflowsServiceClient is the client API for WorkflowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorkflowsService contains the service definition for the Workflow service.
type WorkflowsServiceClient interface {
	// CreateWorkflow a new workflow.
	CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error)
	// UpdateWorkflow an existing workflow.
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error)
	// UpdateWorkflowBuildStatus updates the build status of a workflow.
	// This is an internal API and should not be exposed to the public.
	UpdateWorkflowBuildStatus(ctx context.Context, in *UpdateWorkflowBuildStatusRequest, opts ...grpc.CallOption) (*UpdateWorkflowBuildStatusResponse, error)
	// GetWorkflow gets a workflow by ID and user_id.
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error)
	// GetWorkflowByID a workflow by ID.
	// This is an internal API and should not be exposed to the public.
	GetWorkflowByID(ctx context.Context, in *GetWorkflowByIDRequest, opts ...grpc.CallOption) (*GetWorkflowByIDResponse, error)
	// IncrementWorkflowConsecutiveJobFailuresCount increments the consecutive job failures count of a workflow.
	// This is an internal API and should not be exposed to the public.
	IncrementWorkflowConsecutiveJobFailuresCount(ctx context.Context, in *IncrementWorkflowConsecutiveJobFailuresCountRequest, opts ...grpc.CallOption) (*IncrementWorkflowConsecutiveJobFailuresCountResponse, error)
	// ResetWorkflowConsecutiveJobFailuresCount resets the consecutive job failures count of a workflow.
	// This is an internal API and should not be exposed to the public.
	ResetWorkflowConsecutiveJobFailuresCount(ctx context.Context, in *ResetWorkflowConsecutiveJobFailuresCountRequest, opts ...grpc.CallOption) (*ResetWorkflowConsecutiveJobFailuresCountResponse, error)
	// TerminateWorkflow terminates a workflow.
	TerminateWorkflow(ctx context.Context, in *TerminateWorkflowRequest, opts ...grpc.CallOption) (*TerminateWorkflowResponse, error)
	// DeleteWorkflow deletes a workflow.
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*DeleteWorkflowResponse, error)
	// ListWorkflows returns a list of all workflows owned by a user.
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
}

type workflowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowsServiceClient(cc grpc.ClientConnInterface) WorkflowsServiceClient {
	return &workflowsServiceClient{cc}
}

func (c *workflowsServiceClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*CreateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*UpdateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_UpdateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) UpdateWorkflowBuildStatus(ctx context.Context, in *UpdateWorkflowBuildStatusRequest, opts ...grpc.CallOption) (*UpdateWorkflowBuildStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkflowBuildStatusResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_UpdateWorkflowBuildStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*GetWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) GetWorkflowByID(ctx context.Context, in *GetWorkflowByIDRequest, opts ...grpc.CallOption) (*GetWorkflowByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowByIDResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_GetWorkflowByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) IncrementWorkflowConsecutiveJobFailuresCount(ctx context.Context, in *IncrementWorkflowConsecutiveJobFailuresCountRequest, opts ...grpc.CallOption) (*IncrementWorkflowConsecutiveJobFailuresCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrementWorkflowConsecutiveJobFailuresCountResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_IncrementWorkflowConsecutiveJobFailuresCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) ResetWorkflowConsecutiveJobFailuresCount(ctx context.Context, in *ResetWorkflowConsecutiveJobFailuresCountRequest, opts ...grpc.CallOption) (*ResetWorkflowConsecutiveJobFailuresCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetWorkflowConsecutiveJobFailuresCountResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_ResetWorkflowConsecutiveJobFailuresCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) TerminateWorkflow(ctx context.Context, in *TerminateWorkflowRequest, opts ...grpc.CallOption) (*TerminateWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_TerminateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*DeleteWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_DeleteWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsServiceClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowsService_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowsServiceServer is the server API for WorkflowsService service.
// All implementations should embed UnimplementedWorkflowsServiceServer
// for forward compatibility.
//
// WorkflowsService contains the service definition for the Workflow service.
type WorkflowsServiceServer interface {
	// CreateWorkflow a new workflow.
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error)
	// UpdateWorkflow an existing workflow.
	UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error)
	// UpdateWorkflowBuildStatus updates the build status of a workflow.
	// This is an internal API and should not be exposed to the public.
	UpdateWorkflowBuildStatus(context.Context, *UpdateWorkflowBuildStatusRequest) (*UpdateWorkflowBuildStatusResponse, error)
	// GetWorkflow gets a workflow by ID and user_id.
	GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error)
	// GetWorkflowByID a workflow by ID.
	// This is an internal API and should not be exposed to the public.
	GetWorkflowByID(context.Context, *GetWorkflowByIDRequest) (*GetWorkflowByIDResponse, error)
	// IncrementWorkflowConsecutiveJobFailuresCount increments the consecutive job failures count of a workflow.
	// This is an internal API and should not be exposed to the public.
	IncrementWorkflowConsecutiveJobFailuresCount(context.Context, *IncrementWorkflowConsecutiveJobFailuresCountRequest) (*IncrementWorkflowConsecutiveJobFailuresCountResponse, error)
	// ResetWorkflowConsecutiveJobFailuresCount resets the consecutive job failures count of a workflow.
	// This is an internal API and should not be exposed to the public.
	ResetWorkflowConsecutiveJobFailuresCount(context.Context, *ResetWorkflowConsecutiveJobFailuresCountRequest) (*ResetWorkflowConsecutiveJobFailuresCountResponse, error)
	// TerminateWorkflow terminates a workflow.
	TerminateWorkflow(context.Context, *TerminateWorkflowRequest) (*TerminateWorkflowResponse, error)
	// DeleteWorkflow deletes a workflow.
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error)
	// ListWorkflows returns a list of all workflows owned by a user.
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)
}

// UnimplementedWorkflowsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkflowsServiceServer struct{}

func (UnimplementedWorkflowsServiceServer) CreateWorkflow(context.Context, *CreateWorkflowRequest) (*CreateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedWorkflowsServiceServer) UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*UpdateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (UnimplementedWorkflowsServiceServer) UpdateWorkflowBuildStatus(context.Context, *UpdateWorkflowBuildStatusRequest) (*UpdateWorkflowBuildStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowBuildStatus not implemented")
}
func (UnimplementedWorkflowsServiceServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowsServiceServer) GetWorkflowByID(context.Context, *GetWorkflowByIDRequest) (*GetWorkflowByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowByID not implemented")
}
func (UnimplementedWorkflowsServiceServer) IncrementWorkflowConsecutiveJobFailuresCount(context.Context, *IncrementWorkflowConsecutiveJobFailuresCountRequest) (*IncrementWorkflowConsecutiveJobFailuresCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementWorkflowConsecutiveJobFailuresCount not implemented")
}
func (UnimplementedWorkflowsServiceServer) ResetWorkflowConsecutiveJobFailuresCount(context.Context, *ResetWorkflowConsecutiveJobFailuresCountRequest) (*ResetWorkflowConsecutiveJobFailuresCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetWorkflowConsecutiveJobFailuresCount not implemented")
}
func (UnimplementedWorkflowsServiceServer) TerminateWorkflow(context.Context, *TerminateWorkflowRequest) (*TerminateWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateWorkflow not implemented")
}
func (UnimplementedWorkflowsServiceServer) DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedWorkflowsServiceServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowsServiceServer) testEmbeddedByValue() {}

// UnsafeWorkflowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowsServiceServer will
// result in compilation errors.
type UnsafeWorkflowsServiceServer interface {
	mustEmbedUnimplementedWorkflowsServiceServer()
}

func RegisterWorkflowsServiceServer(s grpc.ServiceRegistrar, srv WorkflowsServiceServer) {
	// If the following call panics, it indicates UnimplementedWorkflowsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkflowsService_ServiceDesc, srv)
}

func _WorkflowsService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).CreateWorkflow(ctx, req.(*CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_UpdateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_UpdateWorkflowBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowBuildStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).UpdateWorkflowBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_UpdateWorkflowBuildStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).UpdateWorkflowBuildStatus(ctx, req.(*UpdateWorkflowBuildStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_GetWorkflowByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).GetWorkflowByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_GetWorkflowByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).GetWorkflowByID(ctx, req.(*GetWorkflowByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_IncrementWorkflowConsecutiveJobFailuresCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementWorkflowConsecutiveJobFailuresCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).IncrementWorkflowConsecutiveJobFailuresCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_IncrementWorkflowConsecutiveJobFailuresCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).IncrementWorkflowConsecutiveJobFailuresCount(ctx, req.(*IncrementWorkflowConsecutiveJobFailuresCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_ResetWorkflowConsecutiveJobFailuresCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetWorkflowConsecutiveJobFailuresCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).ResetWorkflowConsecutiveJobFailuresCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_ResetWorkflowConsecutiveJobFailuresCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).ResetWorkflowConsecutiveJobFailuresCount(ctx, req.(*ResetWorkflowConsecutiveJobFailuresCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_TerminateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).TerminateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_TerminateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).TerminateWorkflow(ctx, req.(*TerminateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_DeleteWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowsService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowsServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowsService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowsServiceServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowsService_ServiceDesc is the grpc.ServiceDesc for WorkflowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflows.WorkflowsService",
	HandlerType: (*WorkflowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _WorkflowsService_CreateWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _WorkflowsService_UpdateWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflowBuildStatus",
			Handler:    _WorkflowsService_UpdateWorkflowBuildStatus_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowsService_GetWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowByID",
			Handler:    _WorkflowsService_GetWorkflowByID_Handler,
		},
		{
			MethodName: "IncrementWorkflowConsecutiveJobFailuresCount",
			Handler:    _WorkflowsService_IncrementWorkflowConsecutiveJobFailuresCount_Handler,
		},
		{
			MethodName: "ResetWorkflowConsecutiveJobFailuresCount",
			Handler:    _WorkflowsService_ResetWorkflowConsecutiveJobFailuresCount_Handler,
		},
		{
			MethodName: "TerminateWorkflow",
			Handler:    _WorkflowsService_TerminateWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _WorkflowsService_DeleteWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _WorkflowsService_ListWorkflows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflows/workflows.proto",
}
