apiVersion: batch/v1
kind: Job
metadata:
  name: init-service-certs
  namespace: chronoverse
  labels:
    app: init-service-certs
    component: init-container
spec:
  template:
    metadata:
      labels:
        app: init-service-certs
        component: init-container
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-service-certs
        image: alpine:latest
        command:
        - sh
        - -c
        - |
          echo "🔐 Initializing TLS certificates for services..."

          apk update && apk add --no-cache openssl openjdk11-jre-headless
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk

          mkdir -p /certs/ca

          SERVICES="kafka users-service workflows-service jobs-service notifications-service analytics-service"
          for svc in $$SERVICES; do
            mkdir -p /certs/$$svc
          done

          # Generate CA if not exists
          if [ ! -f /certs/ca/ca.key ] || [ ! -f /certs/ca/ca.crt ]; then
            echo "🛡️ Generating CA certificate..."
            openssl genrsa -out /certs/ca/ca.key 4096
            openssl req -x509 -new -nodes -key /certs/ca/ca.key -sha256 \
              -days 365 -out /certs/ca/ca.crt \
              -subj "/CN=Chronoverse CA"
            echo "✅ CA certificate created"
          else
            echo "🔁 CA certificate already exists, skipping"
          fi

          for svc in $$SERVICES; do
            CERT_PATH="/certs/$$svc"
            if [ -f "$$CERT_PATH/$$svc.crt" ] && [ -f "$$CERT_PATH/$$svc.key" ]; then
              echo "� Certificate already exists for $$svc, skipping"
              continue
            fi

            echo "�🔧 Generating certificate for $$svc..."
            openssl genrsa -out "$$CERT_PATH/$$svc.key" 4096
            openssl req -new -key "$$CERT_PATH/$$svc.key" \
              -out "$$CERT_PATH/$$svc.csr" \
              -subj "/CN=Chronoverse $$svc"

            echo "subjectAltName=IP:0.0.0.0,IP:127.0.0.1,DNS:$$svc,DNS:$$svc.chronoverse,DNS:$$svc.chronoverse.svc,DNS:$$svc.chronoverse.svc.cluster.local" > "$$CERT_PATH/$$svc-ext.cnf"

            openssl x509 -req -in "$$CERT_PATH/$$svc.csr" \
              -CA /certs/ca/ca.crt -CAkey /certs/ca/ca.key \
              -CAcreateserial -out "$$CERT_PATH/$$svc.crt" -days 365 \
              -extfile "$$CERT_PATH/$$svc-ext.cnf"

            rm "$$CERT_PATH/$$svc.csr" "$$CERT_PATH/$$svc-ext.cnf"

            echo "✅ Certificate created for $$svc"
          done

          # Convert Kafka PEM to PKCS12
          if [ ! -f /certs/kafka/kafka.p12 ]; then
            echo "🔄 Converting Kafka PEM to PKCS12..."
            openssl pkcs12 -export \
              -in /certs/kafka/kafka.crt \
              -inkey /certs/kafka/kafka.key \
              -certfile /certs/ca/ca.crt \
              -out /certs/kafka/kafka.p12 \
              -name kafka \
              -password pass:chronoverse
          else
            echo "🔁 Kafka PKCS12 already exists, skipping"
          fi

          # Import PKCS12 to JKS keystore
          if [ ! -f /certs/kafka/kafka.keystore.jks ]; then
            echo "🔄 Importing PKCS12 to JKS keystore..."
            keytool -importkeystore \
              -deststorepass chronoverse \
              -destkeypass chronoverse \
              -destkeystore /certs/kafka/kafka.keystore.jks \
              -srckeystore /certs/kafka/kafka.p12 \
              -srcstoretype PKCS12 \
              -srcstorepass chronoverse \
              -alias kafka
          else
            echo "🔁 Kafka keystore already exists, skipping"
          fi

          # Create Kafka truststore
          echo "🔄 Creating Kafka truststore..."
          if [ ! -f /certs/kafka/kafka.truststore.jks ]; then
            keytool -import -trustcacerts -alias CARoot \
              -file /certs/ca/ca.crt \
              -keystore /certs/kafka/kafka.truststore.jks \
              -storepass chronoverse -noprompt
          else
            echo "🔁 Kafka truststore already exists, skipping"
          fi

          # Client certificate for mTLS
          echo "🔐 Generating client certificate for mTLS..."
          mkdir -p /certs/clients
          if [ ! -f /certs/clients/client.crt ] || [ ! -f /certs/clients/client.key ]; then
            openssl genrsa -out /certs/clients/client.key 4096
            openssl req -new -key /certs/clients/client.key \
              -out /certs/clients/client.csr \
              -subj "/CN=Chronoverse Client"

            echo "subjectAltName=DNS:client" > /certs/clients/client-ext.cnf

            openssl x509 -req -in /certs/clients/client.csr \
              -CA /certs/ca/ca.crt -CAkey /certs/ca/ca.key \
              -CAcreateserial -out /certs/clients/client.crt -days 365 \
              -extfile /certs/clients/client-ext.cnf

            rm /certs/clients/client.csr /certs/clients/client-ext.cnf
            rm /certs/ca/ca.srl
            echo "✅ Client certificate created"
          else
            echo "🔁 Client certificate already exists, skipping"
          fi

          echo "🔐 Setting permissions for all certificates..."

          chmod 444 /certs/ca/ca.crt
          chmod 444 /certs/ca/ca.key

          chmod 444 /certs/kafka/kafka.crt /certs/kafka/kafka.key /certs/kafka/kafka.keystore.jks /certs/kafka/kafka.truststore.jks

          echo "🔐 Creating Kafka keystore credentials files..."
          if [ ! -f /certs/kafka/keystore_creds.txt ]; then
            echo "chronoverse" > /certs/kafka/keystore_creds.txt
          fi
          if [ ! -f /certs/kafka/truststore_creds.txt ]; then
            echo "chronoverse" > /certs/kafka/truststore_creds.txt
          fi
          if [ ! -f /certs/kafka/key_creds.txt ]; then
            echo "chronoverse" > /certs/kafka/key_creds.txt
          fi
          chmod 444 /certs/kafka/*_creds.txt

          for svc in $$SERVICES; do
            if [ -f /certs/$$svc/$$svc.crt ]; then
              chmod 444 /certs/$$svc/$$svc.crt
            fi
            if [ -f /certs/$$svc/$$svc.key ]; then
              chmod 444 /certs/$$svc/$$svc.key
            fi
          done

          chmod 444 /certs/clients/client.crt
          chmod 444 /certs/clients/client.key

          echo "✅ Permissions set successfully"
          echo "🎉 TLS certificates initialized successfully!"
        resources:
          limits:
            cpu: "200m"
            memory: "128Mi"
          requests:
            cpu: "100m"
            memory: "64Mi"
        volumeMounts:
        - name: certs-storage
          mountPath: /certs
      volumes:
      - name: certs-storage
        persistentVolumeClaim:
          claimName: certs-pvc
