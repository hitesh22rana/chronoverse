// Code generated by MockGen. DO NOT EDIT.
// Source: notifications.go
//
// Generated by this command:
//
//	mockgen -source=notifications.go -package=notifications -destination=./mock/notifications.go
//

// Package notifications is a generated GoMock package.
package notifications

import (
	context "context"
	reflect "reflect"

	notifications "github.com/hitesh22rana/chronoverse/internal/model/notifications"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockRepository) CreateNotification(ctx context.Context, userID, kind, payload string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, userID, kind, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockRepositoryMockRecorder) CreateNotification(ctx, userID, kind, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockRepository)(nil).CreateNotification), ctx, userID, kind, payload)
}

// ListNotifications mocks base method.
func (m *MockRepository) ListNotifications(ctx context.Context, userID, kind, cursor string) (*notifications.ListNotificationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", ctx, userID, kind, cursor)
	ret0, _ := ret[0].(*notifications.ListNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockRepositoryMockRecorder) ListNotifications(ctx, userID, kind, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockRepository)(nil).ListNotifications), ctx, userID, kind, cursor)
}

// MarkAllAsRead mocks base method.
func (m *MockRepository) MarkAllAsRead(ctx context.Context, ids []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAllAsRead", ctx, ids, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAllAsRead indicates an expected call of MarkAllAsRead.
func (mr *MockRepositoryMockRecorder) MarkAllAsRead(ctx, ids, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllAsRead", reflect.TypeOf((*MockRepository)(nil).MarkAllAsRead), ctx, ids, userID)
}

// MarkAsRead mocks base method.
func (m *MockRepository) MarkAsRead(ctx context.Context, notificationID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", ctx, notificationID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockRepositoryMockRecorder) MarkAsRead(ctx, notificationID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockRepository)(nil).MarkAsRead), ctx, notificationID, userID)
}
